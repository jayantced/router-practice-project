{"ast":null,"code":"var _jsxFileName = \"F:\\\\REACT\\\\router practice project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["F:/REACT/router practice project/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const {events} = useLoaderData();\r\n\r\n  return <Await resolve={events}>\r\n    {(loadEvents) => <EventsList events={loadEvents}/> }\r\n    </Await>;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: \"Could not fetch events.\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport async function loader() {\r\n  return defer({\r\n    events: loadEvents()\r\n  })\r\n}\r\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGN,aAAa,CAAC,CAAC;EAEhC,oBAAOG,OAAA,CAACN,KAAK;IAACU,OAAO,EAAED,MAAO;IAAAE,QAAA,EAC1BC,UAAU,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AACZ;AAACR,EAAA,CANQD,UAAU;EAAA,QACAJ,aAAa;AAAA;AAAAc,EAAA,GADvBV,UAAU;AAQnB,eAAeA,UAAU;AAGzB,eAAeK,UAAUA,CAAA,EAAG;EAC1B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,MAAMlB,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,eAAeK,MAAMA,CAAA,EAAG;EAC7B,OAAOtB,KAAK,CAAC;IACXQ,MAAM,EAAEG,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}